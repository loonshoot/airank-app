generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mongodb"
  url               = env("MONGODB_CONNECTION_ADMIN_STRING")
}

model Account {
  id                 String  @id @map("_id") @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model CustomerPayment {
  id               String           @id @map("_id") @default(cuid())
  paymentId        String           @unique
  customerId       String           @unique
  email            String?          @unique
  subscriptionType SubscriptionType @default(FREE)
  createdAt        DateTime?        @default(now())
  deletedAt        DateTime?
  updatedAt        DateTime?        @updatedAt

  customer User @relation(fields: [customerId], references: [id])

  @@map("customerPayments")
}

model Domain {
  id          String    @id @map("_id") @default(cuid())
  workspaceId String
  addedById   String
  name        String
  subdomain   String?
  verified    Boolean?  @default(true)
  value       String?
  createdAt   DateTime? @default(now())
  deletedAt   DateTime?
  updatedAt   DateTime? @updatedAt

  addedBy   User      @relation(fields: [addedById], references: [id])
  workspace Workspace @relation(fields: [workspaceId], references: [id])

  @@map("domains")
}

model Member {
  id          String    @id @map("_id") @default(cuid())
  workspaceId String
  userId      String
  email       String?
  inviter     String
  permissions String[] @default(["query:members","query:sources","query:workspaces","query:integrations","query:jobs","query:tokens","query:collections","query:objects","query:logs","query:config","mutation:updateConfig","mutation:archiveSource","mutation:registerExternalCredentials","mutation:createSource","mutation:deleteExternalCredentials","mutation:deleteSource","mutation:registerExternalCredentials","mutation:scheduleJobs","mutation:updateSource", "mutation:createStreamRoute", "query:streamRoutes","mutation:createQuery","mutation:updateQuery","mutation:deleteQuery","query:query","mutation:runQuery"]) // Array of permission strings
  invitedAt   DateTime? @default(now())
  joinedAt    DateTime?
  deletedAt   DateTime?
  updatedAt   DateTime? @updatedAt

  status    InvitationStatus @default(PENDING)
  teamRole  TeamRole         @default(MEMBER)
  member    User?            @relation(fields: [email], references: [email], name: "membership")
  user      User             @relation(fields: [userId], references: [id], name: "userMember")
  invitedBy User?            @relation(fields: [inviter], references: [email], name: "inviter")
  workspace Workspace        @relation(fields: [workspaceId], references: [id])
  
  @@unique([workspaceId, userId])
  @@map("members")
}

model Session {
  id           String   @id @map("_id") @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @map("_id") @default(cuid())
  userCode      String    @unique @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime? @default(now())
  deletedAt     DateTime?
  updatedAt     DateTime? @updatedAt

  accounts         Account[]
  sessions         Session[]
  membership       Member[]         @relation("membership")
  userMembership   Member[]         @relation("userMember")
  invitedMembers   Member[]         @relation("inviter")
  createdWorkspace Workspace[]
  customerPayment  CustomerPayment?
  domains          Domain[]

  @@unique([userCode, email])
  @@map("users")
}

model VerificationToken {
  id         String   @id @map("_id") @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationTokens")
}

model Workspace {
  id            String    @id @map("_id") @default(cuid())
  workspaceCode String    @unique @default(cuid())
  inviteCode    String    @unique @default(cuid())
  creatorId     String
  chargebeeSubscriptionId     String
  chargebeeCustomerId     String
  name          String
  slug          String
  createdAt     DateTime? @default(now())
  deletedAt     DateTime?
  updatedAt     DateTime? @updatedAt

  creator User     @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  members Member[]
  domains Domain[]

  @@unique([workspaceCode, inviteCode])
  @@map("workspaces")
  sources      Sources[]
}

model Sources {
  id            String      @id @map("_id") @default(cuid())
  name          String
  whitelistedIp String[]
  bearerToken   String
  sourceType    String
  matchingField String
  datalakeCollection String
  workspace     Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId   String
  
  @@unique([id, bearerToken])
  @@map("sources")
}


enum InvitationStatus {
  ACCEPTED
  PENDING
  DECLINED
}

enum SubscriptionType {
  FREE
  STANDARD
  PREMIUM
}

enum TeamRole {
  MEMBER
  OWNER
}